#include<windows.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>

#define PI 3.1416

#define slice 900

static float	tx	=  -7.0;
static float	ty	=  5.0;



static float	tx_1	=  -5.0;
static float	ty_1	=  15.0;

static float	tx_2	=  -1.0;
static float	ty_2	=  25.0;

static float	tx_3	=  1.0;
static float	ty_3	=  5.0;



static float	tx_4	=  2.0;
static float	ty_4	=  15.0;

static float	tx_5	=  -2.5;
static float	ty_5	=  -1.0;

void circle(float radius_x, float radius_y)
{
	int i = 0;
	float angle = 0.0;

	glBegin(GL_POLYGON);

		for(i = 0; i < slice; i++)
		{
			angle = 2 * PI * i / slice;
			glVertex3f (cos(angle) * radius_x, sin(angle) * radius_y, 0);
		}

	glEnd();
}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);



    glPushMatrix();

	glPushMatrix();
    glColor3f(0.0, 1.0, 0.0);
    glTranslatef(tx,ty,0);
	circle(6,6);
    glPopMatrix();



    glPushMatrix();
    glColor3f(0.0, 1.0, 0.0);
    glTranslatef(tx_1,ty_1,0);
	circle(6,6);
    glPopMatrix();


    glPushMatrix();
    glColor3f(0.0, 1.0, 0.0);
    glTranslatef(tx_2,ty_2,0);
	circle(6,6);
    glPopMatrix();



    glPushMatrix();
    glColor3f(0.0, 1.0, 0.0);
    glTranslatef(tx_3,ty_3,0);
	circle(6,6);
    glPopMatrix();


    glPushMatrix();
    glColor3f(0.0, 1.0, 0.0);
    glTranslatef(tx_4,ty_4,0);
	circle(6,6);
    glPopMatrix();



    glPushMatrix();

glTranslatef(tx_5,ty_5,0);
    glBegin(GL_POLYGON);

    glColor3f(0.5f, 0.35f, 0.05f);
    glVertex2d(-6,-30);

    glVertex2d(6,-30);
     glVertex2d(4,0);
     glVertex2d(2,-4);
    glVertex2d(-4,0);







    glEnd();

    glPopMatrix();








    glPopMatrix();

	glFlush();
}

void init(void)
{
	glClearColor (0.0, 0.0, 0.0, 0.0);
	glOrtho(-50.0, 50.0, -50.0, 50.0, -50.0, 50.0);
}



int main()
{
	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize (1000, 1000);
	glutInitWindowPosition (0, 0);
	glutCreateWindow ("Tree");
	init();
	glutDisplayFunc(display);

	glutMainLoop();
	return 0;   /* ANSI C requires main to return int. */
}

